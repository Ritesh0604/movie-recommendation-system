1. Concepts Used:


We've implemented a hybrid recommendation system that combines two main approaches:

a) Content-Based Filtering:

- This method recommends movies similar to those the user has liked in the past.
- It uses movie features like genres and tags to find similar movies.
- Advantage: Can recommend niche items and doesn't suffer from the "cold start" problem for new items.


b) Collaborative Filtering:

- This method recommends movies based on the preferences of users with similar tastes.
- It uses past user ratings to identify similar users or items.
- Advantage: Can discover new interests and doesn't require content analysis of items.


2. Why We Used These Concepts:


We chose a hybrid approach because:

- It combines the strengths of both content-based and collaborative filtering.
- It can provide more diverse and accurate recommendations.
- It helps mitigate the weaknesses of each individual approach (e.g., content-based filtering's tendency to overspecialize, collaborative filtering's cold start problem for new users).


3. Step-by-Step Guide of the Recommendation Process:


Step 1: Data Preparation

- Load movie, rating, and tag data from the SQLite database.
- Preprocess the data (e.g., handling missing values, combining genres and tags).


Step 2: Content-Based Filtering
a) Create TF-IDF matrices for movie genres and tags:

- Use TfidfVectorizer to convert text data into numerical features.
- Combine genre and tag matrices to create a unified feature matrix.


b) Find similar movies based on input:

- For each input movie title, find exact or partial matches in the database.
- Calculate cosine similarity between the input movies and all other movies using the TF-IDF matrix.
- Select top N similar movies based on similarity scores.


Step 3: Collaborative Filtering
a) Create a user-item ratings matrix:

- Rows represent users, columns represent movies, and cells contain ratings.


b) Apply matrix factorization using Truncated SVD:

- Decompose the ratings matrix into lower-dimensional latent factors.
- This helps capture underlying patterns in user-item interactions.


c) For each input movie:

- Find its representation in the latent space.
- Calculate similarity with all other movies in this latent space.
- Select top N similar movies based on these similarities.


Step 4: Combine Recommendations

- Merge the results from content-based and collaborative filtering.
- Remove duplicates and any input movies from the recommendations.
- Return the top N unique recommendations.


4. Key Implementation Details:


a) TF-IDF Vectorization:

- Used for converting text data (genres and tags) into numerical features.
- Helps capture the importance of words in the movie descriptions.


b) Cosine Similarity:

- Used to measure the similarity between movies in the content-based approach.
- Calculates the cosine of the angle between two vectors in the TF-IDF space.


c) Truncated SVD (Matrix Factorization):

- Used in collaborative filtering to reduce the dimensionality of the user-item matrix.
- Helps uncover latent factors that explain the observed user-item interactions.


d) Hybrid Approach:

- Combines recommendations from both methods to provide a more robust set of suggestions.


5. Advantages of Our Approach:


- Diversity: By combining content-based and collaborative methods, we provide diverse recommendations.
- Handling Cold Start: Content-based filtering helps recommend new items that haven't been rated yet.
- Scalability: Using matrix factorization in collaborative filtering allows the system to handle large datasets efficiently.
- Personalization: The system can adapt to individual user preferences over time.


6. Potential Improvements:


- Implement user profiles to store long-term preferences.
- Add real-time learning to update recommendations based on user interactions.
- Incorporate more features like movie popularity, release date, or user demographics.
- Implement advanced algorithms like neural collaborative filtering for potentially better accuracy.
